{"version":3,"sources":["components/launches.js","components/launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchesQuerry","gql","Launches","query","loading","error","data","className","console","log","launches","map","launch","key","flight_number","launch_date_local","launch_success","to","Component","LaunchQuerry","Launch","this","props","match","params","parseInt","variables","mission_name","launch_year","rocket","rocket_id","rocket_name","rocket_type","classNames","client","apolloClient","uri","App","style","textAlign","marginTop","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0fAKA,IAAMA,EAAgBC,IAAF,KA+DLC,EApDf,uKAEQ,OACI,6BACI,kBAAC,IAAD,CAAOC,MAAQH,IAEX,YAA2B,IAAzBI,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KACd,OAAIF,EAAgB,wBAAIG,UAAU,cAAd,YAChBF,GAAOG,QAAQC,IAAIJ,GACvBG,QAAQC,IAAIH,GAEZ,kBAAC,WAAD,KACI,2BAAOC,UAAU,SACb,+BACA,4BACA,6CACA,0CACA,uCACA,+BAGJ,+BACCD,EAAKI,SAASC,KAAI,SAAAC,GAAM,OACrB,wBAAIC,IAAKD,EAAOE,eACZ,4BACCF,EAAOE,eAER,4BAAKF,EAAOG,mBAEZ,4BACCH,EAAOI,gBAER,4BACA,kBAAC,IAAD,CAAMC,GAAE,kBAAaL,EAAOE,eAAiBP,UAAW,gBAAxD,iCAjCpC,GAA8BW,a,6XCV9B,IAAMC,EAAclB,IAAF,KAgFHmB,EA/Df,uKACc,IACDN,EAAeO,KAAKC,MAAMC,MAAMC,OAAhCV,cAEL,OADAA,EAAcW,SAASX,GAEnB,6BACI,kBAAC,IAAD,CAAOX,MAAQgB,EAAcO,UAAW,CAACZ,mBAErC,YAA2B,IAAzBV,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KACd,GAAIF,EAAS,OAAO,wBAAIG,UAAU,cAAd,WAChBF,GAAOG,QAAQC,IAAIJ,GACvBG,QAAQC,IAAIH,GAHU,MAKyFA,EAAKM,OAA7Ge,EALe,EAKfA,aAAcb,EALC,EAKDA,cAAec,EALd,EAKcA,YAAaZ,EAL3B,EAK2BA,eAL3B,IAK2Ca,OAAQC,EALnD,EAKmDA,UAAWC,EAL9D,EAK8DA,YAAaC,EAL3E,EAK2EA,YACjG,OAAO,6BACH,6BAAK,6BACL,wBAAIzB,UAAU,aAAY,0BAAMA,UAAU,aAAhB,aAC1B,0BAAMA,UAAW0B,IAAW,CACxB,eAAgBjB,EAChB,eAAgBA,KAEfW,IACL,wBAAIpB,UAAU,cAClB,wBAAIA,UAAU,mBAAd,kBACoBO,GAEpB,wBAAIP,UAAU,mBAAd,gBACkBqB,GAElB,wBAAIrB,UAAU,mBAAd,qBACuB,IACnB,0BACAA,UAAU,cAETS,EAAiB,MAAQ,QAK9B,wBAAIT,UAAU,QAAd,kBACA,wBAAIA,UAAU,cACd,wBAAIA,UAAU,mBAAd,cAA4CuB,GAC5C,wBAAIvB,UAAU,mBAAd,gBACkBwB,GAElB,wBAAIxB,UAAU,mBAAd,gBACkByB,IAGlB,6BACA,kBAAC,IAAD,CAAMf,GAAG,IAAIV,UAAU,qBAAvB,iBAlDxB,GAA4BW,a,sBCftBgB,EAAQ,IAAIC,IAAa,CAC7BC,IAAK,aAkBQC,MAhBf,WACE,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,IAAD,KACE,yBAAK3B,UAAU,iBACb,wBAAI+B,MAAO,CAACC,UAAW,SAAUC,UAAU,KAA3C,sBACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzC,IACjC,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,yBAAyBC,UAAWvB,QCN5CwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxB,MACvB,2DCZNyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtD,GACLG,QAAQH,MAAMA,EAAMuD,c","file":"static/js/main.62eac755.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport {Link} from 'react-router-dom';\r\n//import Moment from 'react-moment';\r\nconst LaunchesQuerry= gql`\r\nquery LaunchesQuery {\r\n    launches{\r\n        flight_number\r\n        launch_date_local\r\n        launch_success\r\n    }\r\n \r\n}\r\n\r\n`;\r\nexport class Launches extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Query query= {LaunchesQuerry}>\r\n                    {\r\n                    ({loading, error, data})=>{\r\n                        if (loading) return <h3 className=\"alert-info\">loading</h3>\r\n                        if (error) console.log(error)\r\n                        console.log(data)                                                                   \r\n                        return (\r\n                        <Fragment>\r\n                            <table className='table'>\r\n                                <thead>\r\n                                <tr>\r\n                                <th>Flight number</th>\r\n                                <th>Local date</th>\r\n                                <th>Success</th>\r\n                                <th></th>\r\n                                </tr>\r\n                                </thead>\r\n                            <tbody>\r\n                            {data.launches.map(launch=> (\r\n                                <tr key={launch.flight_number}>\r\n                                    <td>\r\n                                    {launch.flight_number}  \r\n                                    </td>\r\n                                    <td>{launch.launch_date_local}\r\n                                    </td>\r\n                                    <td>\r\n                                    {launch.launch_success} \r\n                                    </td>\r\n                                    <td>\r\n                                    <Link to={`/launch/${launch.flight_number}`} className= 'btn btn-info'>More details</Link>\r\n                                    </td>\r\n                                    \r\n                                </tr>\r\n                            ))}\r\n                            </tbody>\r\n                            </table>\r\n                        </Fragment>)\r\n                        \r\n\r\n                    }\r\n                    }\r\n                    \r\n                </Query>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Launches\r\n","import React, { Component } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport {Link} from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nconst LaunchQuerry= gql`\r\nquery LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number){\r\n        flight_number\r\n        mission_name\r\n        launch_year\r\n        launch_success\r\n        rocket{\r\n            rocket_id\r\n            rocket_name\r\n            rocket_type\r\n        }\r\n    }\r\n \r\n}\r\n\r\n`;\r\nexport class Launch extends Component {\r\n    render() {\r\n        let {flight_number}=this.props.match.params;\r\n        flight_number=parseInt(flight_number);\r\n        return (\r\n            <div>\r\n                <Query query= {LaunchQuerry} variables={{flight_number}}>\r\n                    {\r\n                    ({loading, error, data})=>{\r\n                        if (loading) return <h3 className=\"alert-info\">loading</h3>\r\n                        if (error) console.log(error);\r\n                        console.log(data);\r\n                        \r\n                        const {mission_name, flight_number, launch_year, launch_success, rocket:{rocket_id, rocket_name, rocket_type}}=data.launch;\r\n                        return <div>\r\n                            <br/><br/>\r\n                            <h1 className=\"display-4\"><span className=\"text-dark\">Mission: </span>\r\n                            <span className={classNames({\r\n                                'text-success': launch_success,\r\n                                'text-danger': !launch_success\r\n                            })}>\r\n                                {mission_name}</span></h1>\r\n                            <ul className=\"list-group\">\r\n                        <li className=\"list-group-item\">\r\n                            Flight Number: {flight_number}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Launch Year: {launch_year}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Launch Successful:{' '}\r\n                            <span\r\n                            className='text-black'\r\n                            >\r\n                            {launch_success ? 'Yes' : 'No'}\r\n                            </span>\r\n                        </li>\r\n                        </ul>\r\n\r\n                        <h4 className=\"my-3\">Rocket Details</h4>\r\n                        <ul className=\"list-group\">\r\n                        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                        <li className=\"list-group-item\">\r\n                            Rocket Name: {rocket_name}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Rocket Type: {rocket_type}\r\n                        </li>\r\n                        </ul>\r\n                        <hr />\r\n                        <Link to=\"/\" className=\"btn btn-secondary\">\r\n                        Back\r\n                        </Link>\r\n                    \r\n                        </div>\r\n                                }\r\n                            }\r\n                </Query>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Launch\r\n","import React from 'react';\nimport apolloClient from 'apollo-boost';\nimport Launches from './components/launches';\nimport Launch from './components/launch';\nimport {ApolloProvider} from 'react-apollo';\nimport './App.css';\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\n\nconst client= new apolloClient({\n  uri: \"/graphql\"\n});\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"app container\">\n          <h1 style={{textAlign: 'center', marginTop:30}}>Spacex launch data</h1> \n          <Route exact path='/' component={Launches} />\n          <Route exact path='/launch/:flight_number' component={Launch} />\n        </div>\n      </Router>\n      \n    </ApolloProvider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}